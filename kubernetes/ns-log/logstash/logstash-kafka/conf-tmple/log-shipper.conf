input {
    file {
        path => '/home/worker/data/nginx/logs/*.access.log'
        type => 'nginx'
    }
    file {
        path => '/home/worker/data/www/runtime/*/*.log'
        type => 'app'
    }
}
filter {
    mutate {
        add_field => ['shipper', '%{host}']
        add_field => ['domain', 'default']
    }
    ruby {
        code => "
            if event['message'].length > 20480 then;
                event['message'] = event['message'][0,20480];
            end;
        "
    }
    if [type] == 'nginx' {
        mutate {
            add_field => ['app_name', 'nginx']
        }
    } else if [type] == 'app' {
        grok {
            match => ["message", '^\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2} \[(?<loglevel>[^\]]+)\]']
        }
        if "_grokparsefailure" in [tags] { drop{} }
        grok {
            match => ["path", '.+/(?<app_name>[^/]+)/[^/]+\.log$']
        }
        if "_grokparsefailure" in [tags] { drop{} }

        if [loglevel] == 'notice' {
            mutate {
                update => ["type", "appnotice"]
            }
        } else if [loglevel] =~ /^(warning|error)$/ {
            mutate {
                update => ["type", "appwarn"]
            }
        } else {
            drop {}
        }
    }


# start indexer
    mutate {
        remove_field => [ "log_year", "log_mon", "log_day", "log_hour", "log_min", "log_sec", "path", "log_suffix", "@version" ]
    }
    if [type] == "nginx" {
        grok {
            patterns_dir => "patterns/grok-patterns"
            match => ["message", "%{IPORHYPHEN:remote_ip} %{WORD:logid} %{URIHOST:urihost} \[%{HTTPDATE:logdate}\] %{QS:request} %{NUMBER:status} (%{INT}|-)/(%{INT}|-)\s*%{GREEDYDATA:auxinfo}"]
        }
        if "_grokparsefailure" in [tags] { drop{} }
        grok {
            patterns_dir => "patterns/grok-patterns"
            match => ["auxinfo", "%{QS} %{QS} %{BASE16FLOAT:cost} %{UPSTREAM_RESPONSE_TIME:upstream_cost} %{QS} %{QS} %{QS} %{QS}"]
        }
        grok {
            patterns_dir => "patterns/grok-patterns"
            match => ["request", "%{WORD:method} %{URIPATH:uripath}(%{URIPARAM:urlparams})? %{URIPROTO}/%{BASE16FLOAT}"]
        }
        grok {
            patterns_dir => "patterns/grok-patterns"
            match => ["urihost", "%{IPORHOST:iporhost}"]
        }
        if "_grokparsefailure" in [tags] { drop{} }
        if [port] {
            mutate {
                replace => ["domain", "%{iporhost}(%{port})"]
            }
        } else {
            mutate {
                replace => ["domain", "%{iporhost}"]
            }
        }
        date {
            match => ["logdate", "dd/MMM/YYYY:HH:mm:ss Z"]
            target => "logdate"
        }
        mutate {
            remove_field => ["request", "urlparams", "method", "auxinfo", "iporhost"]
        }
    } else if [type] =~ /(appwarn|appnotice)/ {
        grok {
            patterns_dir => "patterns/grok-patterns"
            match => ["message", "%{DATESTAMP:logdate} \[%{WORD}\] \[(?<category>[^\]]*)\]%{GREEDYDATA}\[logid:%{WORD:logid}\]\s*%{GREEDYDATA:msg}"]
        }
        date {
            match => ["logdate", "YYYY/MM/dd HH:mm:ss"]
            target => "logdate"
        }
        if [type] == "appnotice" {
            grok {
                patterns_dir => "patterns/grok-patterns"
                match => ["msg", "\[%{BASE16FLOAT:cost}\(ms\)\] \[%{BASE16FLOAT:memory}\(MB\)\] \[%{URIPATH:uripath}(?:%{URIPARAM})?\] \[(?<pushLogInfo>.*)(?=\]\sprofile\[)\]\sprofile\[(?<profileInfo>[^\]]*)\]"]
            }
            kv {
                source => 'pushLogInfo'
                target => 'pushLog'
                field_split => ' '
                value_split => '='
                include_keys => ['nickname', 'status', 'share_pv', 'share_fail', 'share_into']
                #default_keys => ['status', 0]
                #exclude_keys => ['request']
            }
            if [pushLog][status] =~ /^[0-9]+$/ {
                mutate {
                    add_field => ['status', '%{[pushLog][status]}']
                }
            }
            if [pushLog][nickname] =~ /^.+$/ {
                mutate {
                    add_field => ['nickname', '%{[pushLog][nickname]}']
                }
                urldecode{
                    field => "nickname"
                }
            }
        } 
        mutate {
            remove_field => ["msg", "pushLogInfo", "profileInfo", "[pushLog][status]", "[pushLog][nickname]", "memory"]
        }
    } else {

    }
    mutate {
        remove_field => ["type", "upstream_cost", "tags"]
    }
}
output {
#    stdout { codec => rubydebug }
    kafka {
        codec             => "json_lines"
        topic_id          => "logstash"
        acks              => "1"
        bootstrap_servers => "10.100.13.60:9092"
        retries           => 3
        retry_backoff_ms  => 200
    }
}

